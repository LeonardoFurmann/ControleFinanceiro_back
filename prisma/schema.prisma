generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id          Int      @id @default(autoincrement())
   name        String   @db.VarChar(255)
   email       String   @db.VarChar(255) @unique
   password    String   @db.Text
   createdAt   DateTime @default(now()) @map("created_at")
   updatedAt   DateTime @updatedAt @map("updated_at")

   // Relacionamentos
   categories         Category[]
   transactions       Transaction[]
   //transactionMouths  TransactionMouth[]

   @@map("users")
   PaymentMethod PaymentMethod[]
}

model Category {
   id                Int      @id @default(autoincrement())
   description       String   @db.VarChar(255)
   userId            Int
   transactionTypeId Int
   createdAt         DateTime @default(now()) @map("created_at")
   updatedAt         DateTime @updatedAt @map("updated_at")

   // Chaves estrangeiras
   user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
   transactionType  TransactionType  @relation(fields: [transactionTypeId], references: [id], onDelete: Cascade)
   transactions     Transaction[]

   @@map("categories")
   @@unique([description, transactionTypeId]) // Garante que a descrição pode se repetir apenas se transactionTypeId for diferente
}

model TransactionType {
   id          Int      @id @default(autoincrement())
   description String   @db.VarChar(255)
   createdAt   DateTime @default(now()) @map("created_at")
   updatedAt   DateTime @updatedAt @map("updated_at")

   // Relacionamento com Categorias
   categories  Category[]

   @@map("transaction_types")
}

model PaymentMethod {
   id          Int      @id @default(autoincrement())
   description String   @db.VarChar(255)
   userId      Int
   createdAt   DateTime @default(now()) @map("created_at")
   updatedAt   DateTime @updatedAt @map("updated_at")

   // Chave estrangeira
   user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

   // Relacionamento com Transações
   transactions Transaction[]

   @@map("payment_methods")
}

model Transaction {
   id              Int      @id @default(autoincrement())
   date            DateTime
   amount          Decimal  @db.Decimal(10,2)
   categoryId      Int
   userId          Int
   paymentMethodId Int
   createdAt       DateTime @default(now()) @map("created_at")
   updatedAt       DateTime @updatedAt @map("updated_at")

   // Chaves estrangeiras
   category       Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
   user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
   paymentMethod  PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

   @@map("transactions")
}

// model TransactionMouth {
//    id         Int      @id @default(autoincrement())
//    month      Int
//    year       Int
//    total      Float
//    amountIn   Float
//    amountOut  Float
//    userId     Int
//    createdAt  DateTime @default(now()) @map("created_at")
//    updatedAt  DateTime @updatedAt @map("updated_at")

//    // Chave estrangeira
//    user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

//    @@map("transaction_months")
// }
